window.OpenVINOIRParser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
    (function() {
        "use strict";

        function peg$subclass(child, parent) {
            function ctor() { this.constructor = child; }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
        }

        function peg$SyntaxError(message, expected, found, location) {
            this.message  = message;
            this.expected = expected;
            this.found    = found;
            this.location = location;
            this.name     = "SyntaxError";

            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, peg$SyntaxError);
            }
        }

        peg$subclass(peg$SyntaxError, Error);

        peg$SyntaxError.buildMessage = function(expected, found) {
            var DESCRIBE_EXPECTATION_FNS = {
                literal: function(expectation) {
                    return "\"" + literalEscape(expectation.text) + "\"";
                },

                "class": function(expectation) {
                    var escapedParts = "",
                        i;

                    for (i = 0; i < expectation.parts.length; i++) {
                        escapedParts += expectation.parts[i] instanceof Array
                            ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                            : classEscape(expectation.parts[i]);
                    }

                    return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                },

                any: function(expectation) {
                    return "any character";
                },

                end: function(expectation) {
                    return "end of input";
                },

                other: function(expectation) {
                    return expectation.description;
                }
            };

            function hex(ch) {
                return ch.charCodeAt(0).toString(16).toUpperCase();
            }

            function literalEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/"/g,  '\\"')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
            }

            function classEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/\]/g, '\\]')
                    .replace(/\^/g, '\\^')
                    .replace(/-/g,  '\\-')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
            }

            function describeExpectation(expectation) {
                return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
            }

            function describeExpected(expected) {
                var descriptions = new Array(expected.length),
                    i, j;

                for (i = 0; i < expected.length; i++) {
                    descriptions[i] = describeExpectation(expected[i]);
                }

                descriptions.sort();

                if (descriptions.length > 0) {
                    for (i = 1, j = 1; i < descriptions.length; i++) {
                        if (descriptions[i - 1] !== descriptions[i]) {
                            descriptions[j] = descriptions[i];
                            j++;
                        }
                    }
                    descriptions.length = j;
                }

                switch (descriptions.length) {
                    case 1:
                        return descriptions[0];

                    case 2:
                        return descriptions[0] + " or " + descriptions[1];

                    default:
                        return descriptions.slice(0, -1).join(", ")
                            + ", or "
                            + descriptions[descriptions.length - 1];
                }
            }

            function describeFound(found) {
                return found ? "\"" + literalEscape(found) + "\"" : "end of input";
            }

            return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };

        function peg$parse(input, options) {
            options = options !== void 0 ? options : {};

            var peg$FAILED = {},

                peg$startRuleFunctions = { Term: peg$parseTerm },
                peg$startRuleFunction  = peg$parseTerm,

                peg$c0 = peg$anyExpectation(),
                peg$c1 = function(next0, meta, next1, first, next2, layers, next3, close, next4, edges, next5, closeEdges, next6, rest) {
                    var key = Object.keys(layers)[0];
                    var layers_cleaned = layers.map(function (x,y) {
                        return x;
                    }).filter(function (x) {
                        return x;
                    });
                    first["layers"] = layers_cleaned;
                    first["edges"] = edges[1];
                    return first;
                },
                peg$c2 = "<?xml",
                peg$c3 = peg$literalExpectation("<?xml", false),
                peg$c4 = "?>",
                peg$c5 = peg$literalExpectation("?>", false),
                peg$c6 = "<net",
                peg$c7 = peg$literalExpectation("<net", false),
                peg$c8 = ">",
                peg$c9 = peg$literalExpectation(">", false),
                peg$c10 = function(first, rest) {
                    var key = first.slice(1);
                    var res = rest.reduce(function(el1, el2) {
                        el1[el2.key] = el2.value;
                        return el1;
                    }, {});
                    var ret = {};
                    ret[key] = res;
                    return ret;
                },
                peg$c11 = "<!--",
                peg$c12 = peg$literalExpectation("<!--", false),
                peg$c13 = "-->",
                peg$c14 = peg$literalExpectation("-->", false),
                peg$c15 = function(i) {return i},
                peg$c16 = function(inner) {return inner.join('')},
                peg$c17 = "<layers>",
                peg$c18 = peg$literalExpectation("<layers>", false),
                peg$c19 = function(first, next0, layer) {return layer;},
                peg$c20 = function(first, next0, rest) {
                    return rest;
                },
                peg$c21 = "</layers>",
                peg$c22 = peg$literalExpectation("</layers>", false),
                peg$c23 = function(next0, start, next1, data, next2, input, next3, inputClose, next4, output, next5, outputClose, next6, weights, next7, biases, next8, weights2, next9, blobs, next10, rest) {
                    var key = '';
                    if (output){
                        key = Object.keys(output)[0];
                        start[key] = output[key];
                    }

                    if (input){
                        key = Object.keys(input)[0];
                        start[key] = input[key];
                    }

                    if (data) {
                        key = Object.keys(data)[0];
                        start[key] = data[key];
                    }

                    if (weights) {
                        key = Object.keys(weights)[0];
                        start[key] = weights[key];
                    }

                    if (weights2) {
                        key = Object.keys(weights2)[0];
                        start[key] = weights2[key];
                    }

                    if (biases) {
                        key = Object.keys(biases)[0];
                        start[key] = biases[key];
                    }

                    if (blobs) {
                        var keys = Object.keys(blobs);
                        keys.reduce(function(el1, el2) {
                            el1[el2] = blobs[el2];
                            return el1;
                        }, start);
                    }

                    return start;
                },
                peg$c24 = "</layer>",
                peg$c25 = peg$literalExpectation("</layer>", false),
                peg$c26 = "<layer",
                peg$c27 = peg$literalExpectation("<layer", false),
                peg$c28 = function(next1, first, next2, rest) {
                    return rest.reduce(function(el1, el2) {
                        el1[el2.key] = el2.value;
                        return el1;
                    }, {});
                },
                peg$c29 = function(next1, first, next2, input) {return input;},
                peg$c30 = function(next1, first, next2, rest) {
                    return {'output': rest};
                },
                peg$c31 = "</output>",
                peg$c32 = peg$literalExpectation("</output>", false),
                peg$c33 = function(next1, port, next2, closePort) {
                    return {
                        'id':port[2].id,
                        'dims': port[6]
                    };
                },
                peg$c34 = "<output>",
                peg$c35 = peg$literalExpectation("<output>", false),
                peg$c36 = function(next1, first, next2, rest) {
                    return {'input': rest};
                },
                peg$c37 = "</input>",
                peg$c38 = peg$literalExpectation("</input>", false),
                peg$c39 = "<input>",
                peg$c40 = peg$literalExpectation("<input>", false),
                peg$c41 = function(next1, start, next2, dim) {return dim;},
                peg$c42 = "<port",
                peg$c43 = peg$literalExpectation("<port", false),
                peg$c44 = "</port>",
                peg$c45 = peg$literalExpectation("</port>", false),
                peg$c46 = function(start, next2, value, next3, rest) {
                    return value;
                },
                peg$c47 = "<dim>",
                peg$c48 = peg$literalExpectation("<dim>", false),
                peg$c49 = "</dim>",
                peg$c50 = peg$literalExpectation("</dim>", false),
                peg$c51 = "/>",
                peg$c52 = peg$literalExpectation("/>", false),
                peg$c53 = function(next1, start) {
                    return {'data': start};
                },
                peg$c54 = "<",
                peg$c55 = peg$literalExpectation("<", false),
                peg$c56 = /^[a-z]/,
                peg$c57 = peg$classExpectation([["a", "z"]], false, false),
                peg$c58 = /^[_\-]/,
                peg$c59 = peg$classExpectation(["_", "-"], false, false),
                peg$c60 = function(next1) {1},
                peg$c61 = "data",
                peg$c62 = peg$literalExpectation("data", false),
                peg$c63 = function(next1, first, rest) {
                    return rest.reduce(function(el1, el2) {
                        el1[el2.key] = el2.value;
                        return el1;
                    }, {});
                },
                peg$c64 = function(next1, start, next2, weights, next3, biases, next4, weights2, next5, customs, next6, end) {
                    var key = '';
                    var res = {};
                    if (weights) {
                        key = Object.keys(weights)[0];
                        res[key] = weights[key];
                    }

                    if (weights2) {
                        key = Object.keys(weights2)[0];
                        res[key] = weights2[key];
                    }

                    if (biases) {
                        key = Object.keys(biases)[0];
                        res[key] = biases[key];
                    }

                    if (customs) {
                        customs.reduce(function(acc, val, key) {
                            var customKey = Object.keys(val)[0];
                            var newName = customKey + key;
                            acc[newName] = val[customKey];
                            return acc;
                        }, res);
                    }

                    return res;
                },
                peg$c65 = "<blobs>",
                peg$c66 = peg$literalExpectation("<blobs>", false),
                peg$c67 = "</blobs>",
                peg$c68 = peg$literalExpectation("</blobs>", false),
                peg$c69 = function(start) {
                    return {'custom': start};
                },
                peg$c70 = "<custom",
                peg$c71 = peg$literalExpectation("<custom", false),
                peg$c72 = function(first, rest) {
                    return rest.reduce(function(el1, el2) {
                        el1[el2.key] = el2.value;
                        return el1;
                    }, {});
                },
                peg$c73 = function(start) {
                    return {'weights': start};
                },
                peg$c74 = "<weights",
                peg$c75 = peg$literalExpectation("<weights", false),
                peg$c76 = function(start) {
                    return  {'biases': start};
                },
                peg$c77 = "<biases",
                peg$c78 = peg$literalExpectation("<biases", false),
                peg$c79 = "<edges>",
                peg$c80 = peg$literalExpectation("<edges>", false),
                peg$c81 = function(first, layer) {return layer;},
                peg$c82 = "</edges>",
                peg$c83 = peg$literalExpectation("</edges>", false),
                peg$c84 = function(start) {
                    return start;
                },
                peg$c85 = "</edge>",
                peg$c86 = peg$literalExpectation("</edge>", false),
                peg$c87 = "<edge",
                peg$c88 = peg$literalExpectation("<edge", false),
                peg$c89 = "</",
                peg$c90 = peg$literalExpectation("</", false),
                peg$c91 = /^[ =\/A-Za-z"0-9 <\->]/,
                peg$c92 = peg$classExpectation([" ", "=", "/", ["A", "Z"], ["a", "z"], "\"", ["0", "9"], " ", "<", "-", ">"], false, false),
                peg$c93 = /^[A-Za-z]/,
                peg$c94 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false),
                peg$c95 = function(head) {
                    return head.join('');
                },
                peg$c96 = "=",
                peg$c97 = peg$literalExpectation("=", false),
                peg$c98 = function(name, value) {
                    return {key: name, value :value}
                },
                peg$c99 = "\"",
                peg$c100 = peg$literalExpectation("\"", false),
                peg$c101 = /^[A-Za-z0-9\/.\-_, ]/,
                peg$c102 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "/", ".", "-", "_", ",", " "], false, false),
                peg$c103 = function(head) {
                    return head.toString().split(',').join('').slice(1, -1);
                },
                peg$c104 = /^[0-9A-Za-z\-_]/,
                peg$c105 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"], "-", "_"], false, false),
                peg$c106 = /^[A-Za-z0-9]/,
                peg$c107 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"]], false, false),
                peg$c108 = function(head) {
                    return head.toString().split(',').join('');
                },
                peg$c109 = peg$otherExpectation("whitespace"),
                peg$c110 = /^[ \t\n\r]/,
                peg$c111 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),

                peg$currPos          = 0,
                peg$savedPos         = 0,
                peg$posDetailsCache  = [{ line: 1, column: 1 }],
                peg$maxFailPos       = 0,
                peg$maxFailExpected  = [],
                peg$silentFails      = 0,

                peg$result;

            if ("startRule" in options) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }

                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }

            function text() {
                return input.substring(peg$savedPos, peg$currPos);
            }

            function location() {
                return peg$computeLocation(peg$savedPos, peg$currPos);
            }

            function expected(description, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

                throw peg$buildStructuredError(
                    [peg$otherExpectation(description)],
                    input.substring(peg$savedPos, peg$currPos),
                    location
                );
            }

            function error(message, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

                throw peg$buildSimpleError(message, location);
            }

            function peg$literalExpectation(text, ignoreCase) {
                return { type: "literal", text: text, ignoreCase: ignoreCase };
            }

            function peg$classExpectation(parts, inverted, ignoreCase) {
                return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
            }

            function peg$anyExpectation() {
                return { type: "any" };
            }

            function peg$endExpectation() {
                return { type: "end" };
            }

            function peg$otherExpectation(description) {
                return { type: "other", description: description };
            }

            function peg$computePosDetails(pos) {
                var details = peg$posDetailsCache[pos], p;

                if (details) {
                    return details;
                } else {
                    p = pos - 1;
                    while (!peg$posDetailsCache[p]) {
                        p--;
                    }

                    details = peg$posDetailsCache[p];
                    details = {
                        line:   details.line,
                        column: details.column
                    };

                    while (p < pos) {
                        if (input.charCodeAt(p) === 10) {
                            details.line++;
                            details.column = 1;
                        } else {
                            details.column++;
                        }

                        p++;
                    }

                    peg$posDetailsCache[pos] = details;
                    return details;
                }
            }

            function peg$computeLocation(startPos, endPos) {
                var startPosDetails = peg$computePosDetails(startPos),
                    endPosDetails   = peg$computePosDetails(endPos);

                return {
                    start: {
                        offset: startPos,
                        line:   startPosDetails.line,
                        column: startPosDetails.column
                    },
                    end: {
                        offset: endPos,
                        line:   endPosDetails.line,
                        column: endPosDetails.column
                    }
                };
            }

            function peg$fail(expected) {
                if (peg$currPos < peg$maxFailPos) { return; }

                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }

                peg$maxFailExpected.push(expected);
            }

            function peg$buildSimpleError(message, location) {
                return new peg$SyntaxError(message, null, null, location);
            }

            function peg$buildStructuredError(expected, found, location) {
                return new peg$SyntaxError(
                    peg$SyntaxError.buildMessage(expected, found),
                    expected,
                    found,
                    location
                );
            }

            function peg$parseTerm() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseXMLVersionTag();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$parseCommentsTag();
                                while (s6 !== peg$FAILED) {
                                    s5.push(s6);
                                    s6 = peg$parseCommentsTag();
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseNetTag();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                s9 = [];
                                                s10 = peg$parseCommentsTag();
                                                while (s10 !== peg$FAILED) {
                                                    s9.push(s10);
                                                    s10 = peg$parseCommentsTag();
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse_();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parseLayersTag();
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parse_();
                                                            if (s12 !== peg$FAILED) {
                                                                s13 = [];
                                                                s14 = peg$parseCommentsTag();
                                                                while (s14 !== peg$FAILED) {
                                                                    s13.push(s14);
                                                                    s14 = peg$parseCommentsTag();
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    s14 = peg$parse_();
                                                                    if (s14 !== peg$FAILED) {
                                                                        s15 = peg$parseLayersCloseTag();
                                                                        if (s15 !== peg$FAILED) {
                                                                            s16 = peg$parse_();
                                                                            if (s16 !== peg$FAILED) {
                                                                                s17 = [];
                                                                                s18 = peg$parseCommentsTag();
                                                                                while (s18 !== peg$FAILED) {
                                                                                    s17.push(s18);
                                                                                    s18 = peg$parseCommentsTag();
                                                                                }
                                                                                if (s17 !== peg$FAILED) {
                                                                                    s18 = peg$parse_();
                                                                                    if (s18 !== peg$FAILED) {
                                                                                        s19 = peg$parseEdgesTag();
                                                                                        if (s19 !== peg$FAILED) {
                                                                                            s20 = peg$parse_();
                                                                                            if (s20 !== peg$FAILED) {
                                                                                                s21 = [];
                                                                                                s22 = peg$parseCommentsTag();
                                                                                                while (s22 !== peg$FAILED) {
                                                                                                    s21.push(s22);
                                                                                                    s22 = peg$parseCommentsTag();
                                                                                                }
                                                                                                if (s21 !== peg$FAILED) {
                                                                                                    s22 = peg$parse_();
                                                                                                    if (s22 !== peg$FAILED) {
                                                                                                        s23 = peg$parseEdgesCloseTag();
                                                                                                        if (s23 !== peg$FAILED) {
                                                                                                            s24 = peg$parse_();
                                                                                                            if (s24 !== peg$FAILED) {
                                                                                                                s25 = [];
                                                                                                                s26 = peg$parseCommentsTag();
                                                                                                                while (s26 !== peg$FAILED) {
                                                                                                                    s25.push(s26);
                                                                                                                    s26 = peg$parseCommentsTag();
                                                                                                                }
                                                                                                                if (s25 !== peg$FAILED) {
                                                                                                                    s26 = peg$parse_();
                                                                                                                    if (s26 !== peg$FAILED) {
                                                                                                                        s27 = [];
                                                                                                                        if (input.length > peg$currPos) {
                                                                                                                            s28 = input.charAt(peg$currPos);
                                                                                                                            peg$currPos++;
                                                                                                                        } else {
                                                                                                                            s28 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c0); }
                                                                                                                        }
                                                                                                                        while (s28 !== peg$FAILED) {
                                                                                                                            s27.push(s28);
                                                                                                                            if (input.length > peg$currPos) {
                                                                                                                                s28 = input.charAt(peg$currPos);
                                                                                                                                peg$currPos++;
                                                                                                                            } else {
                                                                                                                                s28 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c0); }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        if (s27 !== peg$FAILED) {
                                                                                                                            peg$savedPos = s0;
                                                                                                                            s1 = peg$c1(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23, s25, s27);
                                                                                                                            s0 = s1;
                                                                                                                        } else {
                                                                                                                            peg$currPos = s0;
                                                                                                                            s0 = peg$FAILED;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$FAILED;
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$FAILED;
                                                                                                                }
                                                                                                            } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$FAILED;
                                                                                                            }
                                                                                                        } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$FAILED;
                                                                                                        }
                                                                                                    } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                    }
                                                                                                } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                }
                                                                                            } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                            }
                                                                                        } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                        }
                                                                                    } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                    }
                                                                                } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                }
                                                                            } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseXMLVersionTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c2) {
                    s1 = peg$c2;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c3); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsetag_attr_pair();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsetag_attr_pair();
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c4) {
                            s3 = peg$c4;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseNetTag() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c6) {
                    s1 = peg$c6;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsetag_attr_pair();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsetag_attr_pair();
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s3 = peg$c8;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c10(s1, s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseCommentsTag() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c11) {
                    s1 = peg$c11;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 3) === peg$c13) {
                        s5 = peg$c13;
                        peg$currPos += 3;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c14); }
                    }
                    peg$silentFails--;
                    if (s5 === peg$FAILED) {
                        s4 = void 0;
                    } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c0); }
                        }
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s4 = peg$c15(s5);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 3) === peg$c13) {
                            s5 = peg$c13;
                            peg$currPos += 3;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c14); }
                        }
                        peg$silentFails--;
                        if (s5 === peg$FAILED) {
                            s4 = void 0;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c0); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s3;
                                s4 = peg$c15(s5);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c13) {
                            s3 = peg$c13;
                            peg$currPos += 3;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c14); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c16(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseLayersTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c17) {
                    s2 = peg$c17;
                    peg$currPos += 8;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseCommentsTag();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseCommentsTag();
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$currPos;
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseLayerTag();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s5;
                                    s6 = peg$c19(s1, s2, s7);
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$currPos;
                                s6 = peg$parse_();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseLayerTag();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s5;
                                        s6 = peg$c19(s1, s2, s7);
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c20(s1, s2, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseLayersCloseTag() {
                var s0;

                if (input.substr(peg$currPos, 9) === peg$c21) {
                    s0 = peg$c21;
                    peg$currPos += 9;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }

                return s0;
            }

            function peg$parseLayerTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseLayerStartTag();
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parseCommentsTag();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parseCommentsTag();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseDataTag();
                                    if (s6 === peg$FAILED) {
                                        s6 = null;
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = [];
                                        s8 = peg$parseCommentsTag();
                                        while (s8 !== peg$FAILED) {
                                            s7.push(s8);
                                            s8 = peg$parseCommentsTag();
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parseInputsTag();
                                                if (s9 === peg$FAILED) {
                                                    s9 = null;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = [];
                                                    s11 = peg$parseCommentsTag();
                                                    while (s11 !== peg$FAILED) {
                                                        s10.push(s11);
                                                        s11 = peg$parseCommentsTag();
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parse_();
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parseInputsCloseTag();
                                                            if (s12 === peg$FAILED) {
                                                                s12 = null;
                                                            }
                                                            if (s12 !== peg$FAILED) {
                                                                s13 = [];
                                                                s14 = peg$parseCommentsTag();
                                                                while (s14 !== peg$FAILED) {
                                                                    s13.push(s14);
                                                                    s14 = peg$parseCommentsTag();
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    s14 = peg$parse_();
                                                                    if (s14 !== peg$FAILED) {
                                                                        s15 = [];
                                                                        s16 = peg$parseOutputsTag();
                                                                        while (s16 !== peg$FAILED) {
                                                                            s15.push(s16);
                                                                            s16 = peg$parseOutputsTag();
                                                                        }
                                                                        if (s15 !== peg$FAILED) {
                                                                            s16 = peg$parse_();
                                                                            if (s16 !== peg$FAILED) {
                                                                                s17 = [];
                                                                                s18 = peg$parseCommentsTag();
                                                                                while (s18 !== peg$FAILED) {
                                                                                    s17.push(s18);
                                                                                    s18 = peg$parseCommentsTag();
                                                                                }
                                                                                if (s17 !== peg$FAILED) {
                                                                                    s18 = peg$parse_();
                                                                                    if (s18 !== peg$FAILED) {
                                                                                        s19 = [];
                                                                                        s20 = peg$parseOutputsCloseTag();
                                                                                        while (s20 !== peg$FAILED) {
                                                                                            s19.push(s20);
                                                                                            s20 = peg$parseOutputsCloseTag();
                                                                                        }
                                                                                        if (s19 !== peg$FAILED) {
                                                                                            s20 = peg$parse_();
                                                                                            if (s20 !== peg$FAILED) {
                                                                                                s21 = [];
                                                                                                s22 = peg$parseCommentsTag();
                                                                                                while (s22 !== peg$FAILED) {
                                                                                                    s21.push(s22);
                                                                                                    s22 = peg$parseCommentsTag();
                                                                                                }
                                                                                                if (s21 !== peg$FAILED) {
                                                                                                    s22 = peg$parse_();
                                                                                                    if (s22 !== peg$FAILED) {
                                                                                                        s23 = peg$parseWeightsTag();
                                                                                                        if (s23 === peg$FAILED) {
                                                                                                            s23 = null;
                                                                                                        }
                                                                                                        if (s23 !== peg$FAILED) {
                                                                                                            s24 = [];
                                                                                                            s25 = peg$parseCommentsTag();
                                                                                                            while (s25 !== peg$FAILED) {
                                                                                                                s24.push(s25);
                                                                                                                s25 = peg$parseCommentsTag();
                                                                                                            }
                                                                                                            if (s24 !== peg$FAILED) {
                                                                                                                s25 = peg$parse_();
                                                                                                                if (s25 !== peg$FAILED) {
                                                                                                                    s26 = peg$parseBiasesTag();
                                                                                                                    if (s26 === peg$FAILED) {
                                                                                                                        s26 = null;
                                                                                                                    }
                                                                                                                    if (s26 !== peg$FAILED) {
                                                                                                                        s27 = [];
                                                                                                                        s28 = peg$parseCommentsTag();
                                                                                                                        while (s28 !== peg$FAILED) {
                                                                                                                            s27.push(s28);
                                                                                                                            s28 = peg$parseCommentsTag();
                                                                                                                        }
                                                                                                                        if (s27 !== peg$FAILED) {
                                                                                                                            s28 = peg$parse_();
                                                                                                                            if (s28 !== peg$FAILED) {
                                                                                                                                s29 = peg$parseWeightsTag();
                                                                                                                                if (s29 === peg$FAILED) {
                                                                                                                                    s29 = null;
                                                                                                                                }
                                                                                                                                if (s29 !== peg$FAILED) {
                                                                                                                                    s30 = [];
                                                                                                                                    s31 = peg$parseCommentsTag();
                                                                                                                                    while (s31 !== peg$FAILED) {
                                                                                                                                        s30.push(s31);
                                                                                                                                        s31 = peg$parseCommentsTag();
                                                                                                                                    }
                                                                                                                                    if (s30 !== peg$FAILED) {
                                                                                                                                        s31 = peg$parse_();
                                                                                                                                        if (s31 !== peg$FAILED) {
                                                                                                                                            s32 = peg$parseBlobsTag();
                                                                                                                                            if (s32 === peg$FAILED) {
                                                                                                                                                s32 = null;
                                                                                                                                            }
                                                                                                                                            if (s32 !== peg$FAILED) {
                                                                                                                                                s33 = [];
                                                                                                                                                s34 = peg$parseCommentsTag();
                                                                                                                                                while (s34 !== peg$FAILED) {
                                                                                                                                                    s33.push(s34);
                                                                                                                                                    s34 = peg$parseCommentsTag();
                                                                                                                                                }
                                                                                                                                                if (s33 !== peg$FAILED) {
                                                                                                                                                    s34 = peg$parse_();
                                                                                                                                                    if (s34 !== peg$FAILED) {
                                                                                                                                                        s35 = peg$parseLayerCloseTag();
                                                                                                                                                        if (s35 !== peg$FAILED) {
                                                                                                                                                            peg$savedPos = s0;
                                                                                                                                                            s1 = peg$c23(s1, s3, s4, s6, s7, s9, s10, s12, s13, s15, s17, s19, s21, s23, s24, s26, s27, s29, s30, s32, s33, s35);
                                                                                                                                                            s0 = s1;
                                                                                                                                                        } else {
                                                                                                                                                            peg$currPos = s0;
                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                        }
                                                                                                                                                    } else {
                                                                                                                                                        peg$currPos = s0;
                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                    }
                                                                                                                                                } else {
                                                                                                                                                    peg$currPos = s0;
                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                }
                                                                                                                                            } else {
                                                                                                                                                peg$currPos = s0;
                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            peg$currPos = s0;
                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                        }
                                                                                                                                    } else {
                                                                                                                                        peg$currPos = s0;
                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                    }
                                                                                                                                } else {
                                                                                                                                    peg$currPos = s0;
                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                peg$currPos = s0;
                                                                                                                                s0 = peg$FAILED;
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            peg$currPos = s0;
                                                                                                                            s0 = peg$FAILED;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        peg$currPos = s0;
                                                                                                                        s0 = peg$FAILED;
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    peg$currPos = s0;
                                                                                                                    s0 = peg$FAILED;
                                                                                                                }
                                                                                                            } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$FAILED;
                                                                                                            }
                                                                                                        } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$FAILED;
                                                                                                        }
                                                                                                    } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                    }
                                                                                                } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                }
                                                                                            } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                            }
                                                                                        } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                        }
                                                                                    } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                    }
                                                                                } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                }
                                                                            } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseLayerCloseTag() {
                var s0;

                if (input.substr(peg$currPos, 8) === peg$c24) {
                    s0 = peg$c24;
                    peg$currPos += 8;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c25); }
                }

                return s0;
            }

            function peg$parseLayerStartTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c26) {
                            s3 = peg$c26;
                            peg$currPos += 6;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c27); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parseCommentsTag();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parseCommentsTag();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                    s6 = [];
                                    s7 = peg$parsetag_attr_pair();
                                    while (s7 !== peg$FAILED) {
                                        s6.push(s7);
                                        s7 = peg$parsetag_attr_pair();
                                    }
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 62) {
                                            s7 = peg$c8;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c28(s1, s3, s4, s6);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseOutputsTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        s4 = peg$parseOutputsStartTag();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parseCommentsTag();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parseCommentsTag();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                    s6 = [];
                                    s7 = peg$currPos;
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseOutputTag();
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s7;
                                            s8 = peg$c29(s1, s3, s4, s9);
                                            s7 = s8;
                                        } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                    while (s7 !== peg$FAILED) {
                                        s6.push(s7);
                                        s7 = peg$currPos;
                                        s8 = peg$parse_();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseOutputTag();
                                            if (s9 !== peg$FAILED) {
                                                peg$savedPos = s7;
                                                s8 = peg$c29(s1, s3, s4, s9);
                                                s7 = s8;
                                            } else {
                                                peg$currPos = s7;
                                                s7 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c30(s1, s3, s4, s6);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseOutputsCloseTag() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9) === peg$c31) {
                    s1 = peg$c31;
                    peg$currPos += 9;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseOutputTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsePortTag();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$parseCommentsTag();
                                while (s6 !== peg$FAILED) {
                                    s5.push(s6);
                                    s6 = peg$parseCommentsTag();
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsePortCloseTag();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c33(s1, s3, s5, s7);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseOutputsStartTag() {
                var s0;

                if (input.substr(peg$currPos, 8) === peg$c34) {
                    s0 = peg$c34;
                    peg$currPos += 8;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c35); }
                }

                return s0;
            }

            function peg$parseInputsTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        s4 = peg$parseInputsStartTag();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parseCommentsTag();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parseCommentsTag();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                    s6 = [];
                                    s7 = peg$currPos;
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseInputTag();
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s7;
                                            s8 = peg$c29(s1, s3, s4, s9);
                                            s7 = s8;
                                        } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                    while (s7 !== peg$FAILED) {
                                        s6.push(s7);
                                        s7 = peg$currPos;
                                        s8 = peg$parse_();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseInputTag();
                                            if (s9 !== peg$FAILED) {
                                                peg$savedPos = s7;
                                                s8 = peg$c29(s1, s3, s4, s9);
                                                s7 = s8;
                                            } else {
                                                peg$currPos = s7;
                                                s7 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c36(s1, s3, s4, s6);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseInputsCloseTag() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c37) {
                    s1 = peg$c37;
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseInputTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsePortTag();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$parseCommentsTag();
                                while (s6 !== peg$FAILED) {
                                    s5.push(s6);
                                    s6 = peg$parseCommentsTag();
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsePortCloseTag();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c33(s1, s3, s5, s7);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseInputsStartTag() {
                var s0;

                if (input.substr(peg$currPos, 7) === peg$c39) {
                    s0 = peg$c39;
                    peg$currPos += 7;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c40); }
                }

                return s0;
            }

            function peg$parsePortTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsePortStartTag();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$parseCommentsTag();
                                while (s6 !== peg$FAILED) {
                                    s5.push(s6);
                                    s6 = peg$parseCommentsTag();
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = [];
                                        s8 = peg$currPos;
                                        s9 = peg$parse_();
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parseDimTag();
                                            if (s10 !== peg$FAILED) {
                                                peg$savedPos = s8;
                                                s9 = peg$c41(s1, s3, s5, s10);
                                                s8 = s9;
                                            } else {
                                                peg$currPos = s8;
                                                s8 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s8;
                                            s8 = peg$FAILED;
                                        }
                                        while (s8 !== peg$FAILED) {
                                            s7.push(s8);
                                            s8 = peg$currPos;
                                            s9 = peg$parse_();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parseDimTag();
                                                if (s10 !== peg$FAILED) {
                                                    peg$savedPos = s8;
                                                    s9 = peg$c41(s1, s3, s5, s10);
                                                    s8 = s9;
                                                } else {
                                                    peg$currPos = s8;
                                                    s8 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s8;
                                                s8 = peg$FAILED;
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5, s6, s7];
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsePortStartTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c42) {
                            s3 = peg$c42;
                            peg$currPos += 5;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c43); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parseCommentsTag();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parseCommentsTag();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                    s6 = [];
                                    s7 = peg$parsetag_attr_pair();
                                    while (s7 !== peg$FAILED) {
                                        s6.push(s7);
                                        s7 = peg$parsetag_attr_pair();
                                    }
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 62) {
                                            s7 = peg$c8;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c28(s1, s3, s4, s6);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsePortCloseTag() {
                var s0;

                if (input.substr(peg$currPos, 7) === peg$c44) {
                    s0 = peg$c44;
                    peg$currPos += 7;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }

                return s0;
            }

            function peg$parseDimTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

                s0 = peg$currPos;
                s1 = peg$parseDimStartTag();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parseCommentsTag();
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parseCommentsTag();
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsetag_value();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = [];
                                        s8 = peg$parseCommentsTag();
                                        while (s8 !== peg$FAILED) {
                                            s7.push(s8);
                                            s8 = peg$parseCommentsTag();
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parseDimCloseTag();
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse_();
                                                    if (s10 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c46(s1, s3, s5, s7, s9);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseDimStartTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c47) {
                            s3 = peg$c47;
                            peg$currPos += 5;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c48); }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseDimCloseTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c49) {
                            s3 = peg$c49;
                            peg$currPos += 6;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c50); }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseDataTag() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseDataStartTag();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c51) {
                                    s5 = peg$c51;
                                    peg$currPos += 2;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c53(s1, s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseDataStartTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 60) {
                            s4 = peg$c54;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c55); }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$currPos;
                            s6 = [];
                            if (peg$c56.test(input.charAt(peg$currPos))) {
                                s7 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c57); }
                            }
                            while (s7 !== peg$FAILED) {
                                s6.push(s7);
                                if (peg$c56.test(input.charAt(peg$currPos))) {
                                    s7 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                }
                            }
                            if (s6 !== peg$FAILED) {
                                if (peg$c58.test(input.charAt(peg$currPos))) {
                                    s7 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                }
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s5;
                                    s6 = peg$c60(s1);
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                            if (s5 === peg$FAILED) {
                                s5 = null;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$currPos;
                                s7 = [];
                                if (peg$c56.test(input.charAt(peg$currPos))) {
                                    s8 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                }
                                while (s8 !== peg$FAILED) {
                                    s7.push(s8);
                                    if (peg$c56.test(input.charAt(peg$currPos))) {
                                        s8 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s8 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    if (peg$c58.test(input.charAt(peg$currPos))) {
                                        s8 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s8 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                    }
                                    if (s8 !== peg$FAILED) {
                                        peg$savedPos = s6;
                                        s7 = peg$c60(s1);
                                        s6 = s7;
                                    } else {
                                        peg$currPos = s6;
                                        s6 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                }
                                if (s6 === peg$FAILED) {
                                    s6 = null;
                                }
                                if (s6 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c61) {
                                        s7 = peg$c61;
                                        peg$currPos += 4;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c62); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s4 = [s4, s5, s6, s7];
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parsetag_attr_pair();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parsetag_attr_pair();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c63(s1, s3, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseBlobsTag() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseBlobsStartTag();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$parseCommentsTag();
                                while (s6 !== peg$FAILED) {
                                    s5.push(s6);
                                    s6 = peg$parseCommentsTag();
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseWeightsTag();
                                        if (s7 === peg$FAILED) {
                                            s7 = null;
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                s9 = [];
                                                s10 = peg$parseCommentsTag();
                                                while (s10 !== peg$FAILED) {
                                                    s9.push(s10);
                                                    s10 = peg$parseCommentsTag();
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parse_();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parseBiasesTag();
                                                        if (s11 === peg$FAILED) {
                                                            s11 = null;
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parse_();
                                                            if (s12 !== peg$FAILED) {
                                                                s13 = [];
                                                                s14 = peg$parseCommentsTag();
                                                                while (s14 !== peg$FAILED) {
                                                                    s13.push(s14);
                                                                    s14 = peg$parseCommentsTag();
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    s14 = peg$parse_();
                                                                    if (s14 !== peg$FAILED) {
                                                                        s15 = peg$parseWeightsTag();
                                                                        if (s15 === peg$FAILED) {
                                                                            s15 = null;
                                                                        }
                                                                        if (s15 !== peg$FAILED) {
                                                                            s16 = peg$parse_();
                                                                            if (s16 !== peg$FAILED) {
                                                                                s17 = [];
                                                                                s18 = peg$parseCommentsTag();
                                                                                while (s18 !== peg$FAILED) {
                                                                                    s17.push(s18);
                                                                                    s18 = peg$parseCommentsTag();
                                                                                }
                                                                                if (s17 !== peg$FAILED) {
                                                                                    s18 = peg$parse_();
                                                                                    if (s18 !== peg$FAILED) {
                                                                                        s19 = [];
                                                                                        s20 = peg$parseCustomBlobsTag();
                                                                                        while (s20 !== peg$FAILED) {
                                                                                            s19.push(s20);
                                                                                            s20 = peg$parseCustomBlobsTag();
                                                                                        }
                                                                                        if (s19 !== peg$FAILED) {
                                                                                            s20 = peg$parse_();
                                                                                            if (s20 !== peg$FAILED) {
                                                                                                s21 = [];
                                                                                                s22 = peg$parseCommentsTag();
                                                                                                while (s22 !== peg$FAILED) {
                                                                                                    s21.push(s22);
                                                                                                    s22 = peg$parseCommentsTag();
                                                                                                }
                                                                                                if (s21 !== peg$FAILED) {
                                                                                                    s22 = peg$parse_();
                                                                                                    if (s22 !== peg$FAILED) {
                                                                                                        s23 = peg$parseBlobsEndTag();
                                                                                                        if (s23 !== peg$FAILED) {
                                                                                                            s24 = peg$parse_();
                                                                                                            if (s24 !== peg$FAILED) {
                                                                                                                peg$savedPos = s0;
                                                                                                                s1 = peg$c64(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23);
                                                                                                                s0 = s1;
                                                                                                            } else {
                                                                                                                peg$currPos = s0;
                                                                                                                s0 = peg$FAILED;
                                                                                                            }
                                                                                                        } else {
                                                                                                            peg$currPos = s0;
                                                                                                            s0 = peg$FAILED;
                                                                                                        }
                                                                                                    } else {
                                                                                                        peg$currPos = s0;
                                                                                                        s0 = peg$FAILED;
                                                                                                    }
                                                                                                } else {
                                                                                                    peg$currPos = s0;
                                                                                                    s0 = peg$FAILED;
                                                                                                }
                                                                                            } else {
                                                                                                peg$currPos = s0;
                                                                                                s0 = peg$FAILED;
                                                                                            }
                                                                                        } else {
                                                                                            peg$currPos = s0;
                                                                                            s0 = peg$FAILED;
                                                                                        }
                                                                                    } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                    }
                                                                                } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                }
                                                                            } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseBlobsStartTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c65) {
                            s3 = peg$c65;
                            peg$currPos += 7;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseBlobsEndTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseCommentsTag();
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseCommentsTag();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 8) === peg$c67) {
                            s3 = peg$c67;
                            peg$currPos += 8;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c68); }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseCustomBlobsTag() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parseCustomBlobsStartTag();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c51) {
                            s3 = peg$c51;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c52); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c69(s1);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseCustomBlobsStartTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7) === peg$c70) {
                    s1 = peg$c70;
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c71); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsetag_attr_pair();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsetag_attr_pair();
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c72(s1, s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseWeightsTag() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parseWeightsStartTag();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c51) {
                            s3 = peg$c51;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c52); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c73(s1);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseWeightsStartTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c74) {
                    s1 = peg$c74;
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c75); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsetag_attr_pair();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsetag_attr_pair();
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c72(s1, s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseBiasesTag() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parseBiasesStartTag();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c51) {
                            s3 = peg$c51;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c52); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c76(s1);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseBiasesStartTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7) === peg$c77) {
                    s1 = peg$c77;
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsetag_attr_pair();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsetag_attr_pair();
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c72(s1, s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseEdgesTag() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.substr(peg$currPos, 7) === peg$c79) {
                    s2 = peg$c79;
                    peg$currPos += 7;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c80); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseEdgeTag();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s4 = peg$c81(s1, s5);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseEdgeTag();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s3;
                                s4 = peg$c81(s1, s5);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseEdgesCloseTag() {
                var s0;

                if (input.substr(peg$currPos, 8) === peg$c82) {
                    s0 = peg$c82;
                    peg$currPos += 8;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }

                return s0;
            }

            function peg$parseEdgeTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseEdgeStartTag();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c51) {
                            s3 = peg$c51;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c52); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c84(s1);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseEdgeCloseTag() {
                var s0;

                if (input.substr(peg$currPos, 7) === peg$c85) {
                    s0 = peg$c85;
                    peg$currPos += 7;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c86); }
                }

                return s0;
            }

            function peg$parseEdgeStartTag() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c87) {
                    s1 = peg$c87;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c88); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsetag_attr_pair();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsetag_attr_pair();
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c72(s1, s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseCloseTag() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c89) {
                    s1 = peg$c89;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c90); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsetag_name();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parsetag_attr_pair();
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsetag_attr_pair();
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 62) {
                                s4 = peg$c8;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c9); }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5];
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseany() {
                var s0, s1;

                s0 = [];
                if (peg$c91.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c92); }
                }
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    if (peg$c91.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c92); }
                    }
                }

                return s0;
            }

            function peg$parsetag_name() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (peg$c93.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c94); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c93.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c94); }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c95(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parsetag_attr_pair() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseattr_name();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s3 = peg$c96;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c97); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseattr_value();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c98(s2, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseattr_value() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                    s2 = peg$c99;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c100); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (peg$c101.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c102); }
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        if (peg$c101.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c102); }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                            s4 = peg$c99;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c100); }
                        }
                        if (s4 !== peg$FAILED) {
                            s2 = [s2, s3, s4];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c103(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseattr_name() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (peg$c104.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c105); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c104.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c105); }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c95(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parsetag_value() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (peg$c106.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c107); }
                }
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c106.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c107); }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c108(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parse_() {
                var s0, s1;

                peg$silentFails++;
                s0 = [];
                if (peg$c110.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c111); }
                }
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    if (peg$c110.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c111); }
                    }
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c109); }
                }

                return s0;
            }

            peg$result = peg$startRuleFunction();

            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            } else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail(peg$endExpectation());
                }

                throw peg$buildStructuredError(
                    peg$maxFailExpected,
                    peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                    peg$maxFailPos < input.length
                        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
                );
            }
        }

        return {
            SyntaxError: peg$SyntaxError,
            parse:       peg$parse
        };
    })();
