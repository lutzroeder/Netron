#!/bin/bash

set -e

root=$(cd $(dirname ${0}); pwd)
src_dir=$(cd $(dirname ${0})/../src; pwd)
ending="
\nif (typeof module !== 'undefined' && typeof module.exports === 'object') {
\n\tmodule.exports.IrParser = IrParser;
\n\tmodule.exports.DotParser = DotParser;
\n}"


identifier=pytorch
virtualenv=${build}/virtualenv/${identifier}

if [ $(which python3) ] && [ $(which pip3) ]; then
    python="python3"
    pip="pip3"
else
    python="python"
    pip="pip"
fi

bold() {
    echo "$(tty -s && tput bold)$1$(tty -s && tput sgr0)" 
}

clean() {
    rm -rf ${root}/package.json \
           ${root}/openvino-ir-grammar.js \
           ${root}/openvino-dot-grammar.js \
           ${root}/package-lock.json \
           ${root}/node_modules \
           ${root}/openvino.js
}

generate() {
    if [ -d "${root}/node_modules" ]; then
        ./node_modules/pegjs/bin/pegjs --format globals ./openvino-ir-grammar.pegjs
        ./node_modules/pegjs/bin/pegjs --format globals ./openvino-dot-grammar.pegjs
        local ir_parser=$(cat ./openvino-ir-grammar.js)
        local ir_content="var IrParser = "
        echo "$ir_content$ir_parser" >> openvino-parser.js
        local dot_parser=$(cat ./openvino-dot-grammar.js)
        local dot_content="var DotParser = "
        echo "$dot_content$dot_parser" >> openvino-parser.js
        echo -e $ending >> openvino-parser.js
    else
        bold "run ./openvino install first"
        exit 1
    fi
}

move() {
    bold "Copying generated parser"
    mv $root/openvino-parser.js $src_dir/openvino-parser.js
}

install() {
    bold "openvino dependencies installed"
    npm init -y
    npm i pegjs hbs-cli handlebars
}

while [ "$#" != 0 ]; do
    command="$1" && shift
    case "${command}" in
        "clean") clean;;
        "generate") generate;;
        "install") install;;
        "move") move;;
    esac
done


